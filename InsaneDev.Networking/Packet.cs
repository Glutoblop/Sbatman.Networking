#region Usings

using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;

#endregion

namespace InsaneDev.Networking
{
    public class Packet : IDisposable
    {
        /// <summary>
        /// This 4 byte sequence is used to improve start of packet regognition, it isnt the sole desciptor of the packet start as this would possibly cause issues
        /// with packets with byte transferes within them that happened to contains this sequence.
        /// </summary>
        public static readonly byte[] PacketStart = {0, 48, 21, 0};
        /// <summary>
        /// The current position in the internal data array
        /// </summary>
        protected int DataPos;
        /// <summary>
        /// Whether the packet is disposed
        /// </summary>
        protected bool Disposed = false;
        /// <summary>
        /// The number of paramerters that are stored in the packet
        /// </summary>
        protected Int16 ParamCount = 0;
        /// <summary>
        /// A temp copy of the byte array generated by this packet, this is used as a cache for packets with multiple targets
        /// </summary>
        protected byte[] _ReturnByteArray;
        /// <summary>
        /// The type id of the packet
        /// </summary>
        public Int16 Type;
        /// <summary>
        /// The internal data array of the packet
        /// </summary>
        protected byte[] _Data = new byte[128];
        /// <summary>
        /// A copy of all the bojects packed in this packet
        /// </summary>
        protected List<object> _PacketObjects;

        /// <summary>
        /// Creates a new packet with the specified type id
        /// </summary>
        /// <param name="type">The packets type ID</param>
        public Packet(Int16 type)
        {
            Type = type;
        }

        /// <summary>
        /// Disposes the packet, destroying all internals buffers and caches
        /// </summary>
        public void Dispose()
        {
            _ReturnByteArray = null;
            if (Disposed) return;
            Disposed = true;
            if (_PacketObjects != null)
            {
                _PacketObjects.Clear();
                _PacketObjects = null;
            }
            _Data = null;
        }

        /// <summary>
        /// Creates a deep copy of this packet
        /// </summary>
        /// <returns></returns>
        public Packet Copy()
        {
            Packet p = new Packet(Type)
            {
                _Data = new byte[_Data.Length]
            };
            _Data.CopyTo(p._Data, 0);
            p.DataPos = DataPos;
            if (_PacketObjects != null) p._PacketObjects = new List<object>(_PacketObjects);
            p.ParamCount = ParamCount;
            p._ReturnByteArray = _ReturnByteArray;
            return p;
        }

        /// <summary>
        /// Adds a double to the packet
        /// </summary>
        /// <param name="d">double to add</param>
        public void AddDouble(Double d)
        {
            _ReturnByteArray = null;
            while (DataPos + 9 >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte) ParamTypes.Double;
            BitConverter.GetBytes(d).CopyTo(_Data, DataPos);
            DataPos += 8;
            ParamCount++;
        }

        /// <summary>
        /// Adds a byte array to the packet
        /// </summary>
        /// <param name="byteArray">The bytearray to add</param>
        public void AddBytePacket(byte[] byteArray)
        {
            _ReturnByteArray = null;
            int size = byteArray.Length;
            while (DataPos + (size + 5) >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte)ParamTypes.BytePacket;
            BitConverter.GetBytes(byteArray.Length).CopyTo(_Data, DataPos);
            DataPos += 4;
            byteArray.CopyTo(_Data, DataPos);
            DataPos += size;
            ParamCount++;
        }


        /// <summary>
        /// Adds a byte array to the packet Compressed
        /// </summary>
        /// <param name="byteArray">The bytearray to add</param>
        public void AddBytePacketCompressed(byte[] byteArray)
        {
            byteArray = Compress(byteArray);
            _ReturnByteArray = null;
            int size = byteArray.Length;
            while (DataPos + (size + 5) >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte)ParamTypes.CompressedBytePacket;
            BitConverter.GetBytes(byteArray.Length).CopyTo(_Data, DataPos);
            DataPos += 4;
            byteArray.CopyTo(_Data, DataPos);
            DataPos += size;
            ParamCount++;
        }


        /// <summary>
        /// Adds a float to the packet
        /// </summary>
        /// <param name="f">The float to add</param>
        public void AddFloat(float f)
        {
            _ReturnByteArray = null;
            while (DataPos + 5 >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte) ParamTypes.Float;
            BitConverter.GetBytes(f).CopyTo(_Data, DataPos);
            DataPos += 4;
            ParamCount++;
        }

        /// <summary>
        /// Adds a boolean to the packet
        /// </summary>
        /// <param name="b">The bool to add</param>
        public void AddBool(bool b)
        {
            _ReturnByteArray = null;
            while (DataPos + 5 >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte) ParamTypes.Bool;
            BitConverter.GetBytes(b).CopyTo(_Data, DataPos);
            DataPos += 1;
            ParamCount++;
        }

        /// <summary>
        /// Adds a long to the packet
        /// </summary>
        /// <param name="l">The long to add</param>
        public void AddLong(long l)
        {
            _ReturnByteArray = null;
            while (DataPos + 9 >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte) ParamTypes.Long;
            BitConverter.GetBytes(l).CopyTo(_Data, DataPos);
            DataPos += 8;
            ParamCount++;
        }

        /// <summary>
        /// Adds an int32 to the packet
        /// </summary>
        /// <param name="i">The int 32 to add</param>
        public void AddInt(Int32 i)
        {
            _ReturnByteArray = null;
            while (DataPos + 5 >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte) ParamTypes.Int32;
            BitConverter.GetBytes(i).CopyTo(_Data, DataPos);
            DataPos += 4;
            ParamCount++;
        }

        /// <summary>
        /// Adds an int64 to the packet
        /// </summary>
        /// <param name="i">The int64 to add</param>
        public void AddULong(UInt64 i)
        {
            _ReturnByteArray = null;
            while (DataPos + 9 >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte) ParamTypes.Ulong;
            BitConverter.GetBytes(i).CopyTo(_Data, DataPos);
            DataPos += 8;
            ParamCount++;
        }

        /// <summary>
        /// Adds an Int16 to the packet
        /// </summary>
        /// <param name="i">The int16 to add</param>
        public void AddShort(Int16 i)
        {
            _ReturnByteArray = null;
            while (DataPos + 3 >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte) ParamTypes.Short;
            BitConverter.GetBytes(i).CopyTo(_Data, DataPos);
            DataPos += 2;
            ParamCount++;
        }

        /// <summary>
        /// Adds a Uint32 to the packet
        /// </summary>
        /// <param name="u">The uint32 to add></param>
        public void AddUInt(UInt32 u)
        {
            _ReturnByteArray = null;
            while (DataPos + 5 >= _Data.Length) ExpandDataArray();
            _Data[DataPos++] = (byte) ParamTypes.Uint32;
            BitConverter.GetBytes(u).CopyTo(_Data, DataPos);
            DataPos += 4;
            ParamCount++;
        }

        /// <summary>
        /// Converts the back to a bytearray
        /// </summary>
        /// <returns></returns>
        public byte[] ToByteArray()
        {
            if (_ReturnByteArray != null) return _ReturnByteArray;
            _ReturnByteArray = new byte[12 + DataPos];
            PacketStart.CopyTo(_ReturnByteArray, 0);
            BitConverter.GetBytes(ParamCount).CopyTo(_ReturnByteArray, 4);
            BitConverter.GetBytes(12 + DataPos).CopyTo(_ReturnByteArray, 6);
            BitConverter.GetBytes(Type).CopyTo(_ReturnByteArray, 10);
            Array.Copy(_Data, 0, _ReturnByteArray, 12, DataPos);
            return _ReturnByteArray;
        }

        /// <summary>
        /// Converts a byte array to a packet
        /// </summary>
        /// <param name="data">the byte array to convery</param>
        /// <returns></returns>
        public static Packet FromByteArray(byte[] data)
        {
            Packet returnPacket = new Packet(BitConverter.ToInt16(data, 10))
            {
                ParamCount = BitConverter.ToInt16(data, 4),
                _Data = new byte[BitConverter.ToInt32(data, 6) - 12]
            };
            returnPacket.DataPos = returnPacket._Data.Length;
            Array.Copy(data, 12, returnPacket._Data, 0, returnPacket._Data.Length);
            returnPacket.UpdateObjects();
            return returnPacket;
        }

        /// <summary>
        /// Returns the list of objects within this packet
        /// </summary>
        /// <returns></returns>
        public object[] GetObjects()
        {
            return _PacketObjects.ToArray();
        }

        /// <summary>
        /// Ensures the packet bojects array correctly represents the objects that should be within this packet
        /// </summary>
        protected void UpdateObjects()
        {
            if (_PacketObjects != null)
            {
                _PacketObjects.Clear();
                _PacketObjects = null;
            }
            _PacketObjects = new List<Object>(ParamCount);
            int bytepos = 0;
            try
            {
                for (int x = 0; x < ParamCount; x++)
                {
                    switch ((ParamTypes) _Data[bytepos++])
                    {
                        case ParamTypes.Double:
                            _PacketObjects.Add(BitConverter.ToDouble(_Data, bytepos));
                            bytepos += 8;
                            break;
                        case ParamTypes.Float:
                            _PacketObjects.Add(BitConverter.ToSingle(_Data, bytepos));
                            bytepos += 4;
                            break;
                        case ParamTypes.Int32:
                            _PacketObjects.Add(BitConverter.ToInt32(_Data, bytepos));
                            bytepos += 4;
                            break;
                        case ParamTypes.Bool:
                            _PacketObjects.Add(BitConverter.ToBoolean(_Data, bytepos));
                            bytepos += 1;
                            break;
                        case ParamTypes.Long:
                            _PacketObjects.Add(BitConverter.ToInt64(_Data, bytepos));
                            bytepos += 8;
                            break;
                        case ParamTypes.BytePacket:
                            byte[] data = new byte[BitConverter.ToInt32(_Data, bytepos)];
                            bytepos += 4;
                            Array.Copy(_Data, bytepos, data, 0, data.Length);
                            _PacketObjects.Add(data);
                            bytepos += data.Length;
                            break;
                        case ParamTypes.Uint32:
                            _PacketObjects.Add(BitConverter.ToUInt32(_Data, bytepos));
                            bytepos += 4;
                            break;
                        case ParamTypes.Ulong:
                            _PacketObjects.Add(BitConverter.ToUInt64(_Data, bytepos));
                            bytepos += 8;
                            break;
                        case ParamTypes.Short:
                            _PacketObjects.Add(BitConverter.ToInt16(_Data, bytepos));
                            bytepos += 2;
                            break;
                        case ParamTypes.CompressedBytePacket:
                            byte[] data2 = new byte[BitConverter.ToInt32(_Data, bytepos)];
                            bytepos += 4;
                            Array.Copy(_Data, bytepos, data2, 0, data2.Length);
                            _PacketObjects.Add(Uncompress(data2));
                            bytepos += data2.Length;
                            break;
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

        /// <summary>
        /// Increases the size of the internal data array
        /// </summary>
        protected void ExpandDataArray()
        {
            _ReturnByteArray = null;
            byte[] newData = new byte[_Data.Length*2];
            _Data.CopyTo(newData, 0);
            _Data = newData;
        }

        /// <summary>
        /// An enum containing supported types
        /// </summary>
        protected enum ParamTypes
        {
            Double,
            Float,
            Int32,
            Bool,
            BytePacket,
            Long,
            Uint32,
            Ulong,
            Short,
            CompressedBytePacket
        };

        public byte[] Compress(byte[] bytes)
        {
            using (var ms = new MemoryStream())
            {
                using (var ds = new DeflateStream(ms, CompressionMode.Compress))
                {
                    ds.Write(bytes, 0, bytes.Length);
                }
                return ms.ToArray();
            }
        }

        public byte[] Uncompress(byte[] bytes)
        {
            using (var ds = new DeflateStream(new MemoryStream(bytes), CompressionMode.Decompress))
            {
                using (var ms = new MemoryStream())
                {
                    ds.CopyTo(ms);
                    return ms.ToArray();
                }
            }
        }
    }
}